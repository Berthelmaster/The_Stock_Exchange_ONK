// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockShareRequester.Data;

namespace StockShareRequester.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StockShareRequester.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buyer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Seller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Buyer = "flow",
                            Name = "Vestas",
                            Price = 1,
                            Quantity = 3,
                            Seller = "ras",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 697, DateTimeKind.Local).AddTicks(9584),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Buyer = "flow",
                            Name = "Novo",
                            Price = 11,
                            Quantity = 5,
                            Seller = "thom",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7292),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Buyer = "flow",
                            Name = "Maersk",
                            Price = 111,
                            Quantity = 10,
                            Seller = "ras",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7457),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Buyer = "ras",
                            Name = "Marcus",
                            Price = 1,
                            Quantity = 7,
                            Seller = "flow",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7466),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Buyer = "ras",
                            Name = "Aarhus University",
                            Price = 11,
                            Quantity = 12,
                            Seller = "thom",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7470),
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Buyer = "ras",
                            Name = "Shit",
                            Price = 111,
                            Quantity = 10,
                            Seller = "thom",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7474),
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Buyer = "thom",
                            Name = "LOL",
                            Price = 1,
                            Quantity = 10,
                            Seller = "flow",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7477),
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            Buyer = "thom",
                            Name = "Testing",
                            Price = 11,
                            Quantity = 20,
                            Seller = "ras",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7481),
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            Buyer = "thom",
                            Name = "Systematic",
                            Price = 111,
                            Quantity = 25,
                            Seller = "ras",
                            TimeStamp = new DateTime(2020, 5, 17, 21, 29, 20, 702, DateTimeKind.Local).AddTicks(7485),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("StockShareRequester.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "something@gmail.com",
                            Name = "Florent",
                            Password = "123456"
                        },
                        new
                        {
                            Id = 2,
                            Email = "thom@gmail.com",
                            Name = "Thomas",
                            Password = "123456"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ras@gmail.com",
                            Name = "Rasmus",
                            Password = "123456"
                        });
                });

            modelBuilder.Entity("StockShareRequester.Models.Stock", b =>
                {
                    b.HasOne("StockShareRequester.Models.User", "User")
                        .WithMany("Stocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
